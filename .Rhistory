num <- "00"+ as.character(num)
print(x)
}
x <- 1
y <- "0" + as.character(x)
y <- '0' + as.character(x)
x >- 1
x <- 1
y <- as.character(x)
y
paste("0",Y)
paste("0",y)
paste("0",y,sep="")
for (num in ID) {
x <- len(num)
if (x == 1) {
num <- paste("0",as.character(num),sep="")
} elseif x == 2 {
num <- paste("00",as.character(num),sep="")
print(x)
}
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif x == 2 {
n <- paste("00",as.character(num),sep="")
print(n)
}
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif x == 2 {
n <- paste("00",as.character(num),sep="")
print(n)
}n <- paste("00",as.character(num),sep="")
paste("00",as.character(num),sep="")
n <- paste("00",as.character(num),sep="")
n
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
print(n)
}
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
print(n)
}}
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
)
print(n)
}
num
ID <- 1:332
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
)
print(n)
}
num
ID <- 1:332
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
)
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
)
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- len(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
)
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} elseif (x == 2) {
n <- paste("00",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
n <- paste("0",as.character(num),sep="")
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} else if (x == 2) {
n <- paste("00",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(x)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} else if (x == 2) {
n <- paste("00",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(ID[num])
print(x)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} else if (x == 2) {
n <- paste("00",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(x,num)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(num)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(length(num))
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(x)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(as.character(num))
print(x)
}
ID <- 1:332
n <-""
for (num in ID) {
ength(as.character(num))
}
ID <- 1:332
n <-""
for (num in ID) {
length(as.character(num))
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(as.character(num))
print(x)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(as.character(num))
print(num)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(num)
print(x)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(ID[num])
print(x)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(ID[num])
print(num, x)
}
x <- 10
ncars(x)
nchars(x)
char(x)
chars(x)
nchar(x)
ID <- 1:332
n <-""
for (num in ID) {
x <- nchar(ID[num])
print(x)
if (x == 1) {
n <- paste("0",as.character(num),sep="")
} else if (x == 2) {
n <- paste("00",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- nchar(ID[num])
print(x)
if (x == 1) {
n <- paste("00",as.character(num),sep="")
} else if (x == 2) {
n <- paste("0",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- length(ID[num])
print(num, x)
}
ID <- 1:332
n <-""
for (num in ID) {
x <- nchar(ID[num])
print(x)
if (x == 1) {
n <- paste("00",as.character(num),sep="")
} else if (x == 2) {
n <- paste("0",as.character(num),sep="")
} else {
n <- as.character(num)
}
pr
ID <- 1:332
n <-""
for (num in ID) {
x <- nchar(ID[num])
print(x)
if (x == 1) {
n <- paste("00",as.character(num),sep="")
} else if (x == 2) {
n <- paste("0",as.character(num),sep="")
} else {
n <- as.character(num)
}
print(n)
}
x
q
e
exit
q
library(datasets)
data(iris)
?iris
iris
mean(sepal.length)
mean(Sepal.Length)
mean("Sepal.Length"")
mean("Sepal.Length")
mean("Sepal.Length")
mean(iris[[“Sepal.Length”]], na.rm=T)
mean(subset(iris, Species == "virginica")[,1])
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
mtcars
sapply(mtcars, cyl, mean)
sapply(mtcars, ear, mean)
split(mtcars, mtcars$cyl)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
cars
mtcats
mtcars
debug(ls)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## funct
ions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## The following functions will create a special "matrix" object that can cache its inverse and determines if the inverse
## has already been calculated and should be retrieved from the cache instead of being recalculated.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set  <- function(y){
x <<- y
m <<- NULL
}
get  <- function() x
setinverse  <- function(inverse) m  <<- inverse
getinverse  <- function() m
list(set= set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m  <- x$getinverse()
if (!is.null(m)){
message("getting cached data")
return(m)
}
data  <- x$get()
m  <- solve(data, ...)
x$setinverse(m)
m
}
X <= matrix(1:6 nrow = 2, ncol = 3)
X <= matrix(1:6, nrow = 2, ncol = 3)
x <= matrix(1:6)
x <= matrix(nrow = 2, ncol = 3)
x <= matrix(nrow = 2, ncol = 3)
m <= matrix(nrow = 2, ncol = 3)
A = matrix(
+   c(2, 4, 3, 1, 5, 7), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
A = matrix(c(2, 4, 3, 1, 5, 7), nrow=2, ncol=3)
makeCacheMatrix(A)
cacheSolve(A)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
conda update conda
devtools::install_github("hadley/r4ds")
install.packages("devtools")
devtools::install_github("hadley/r4ds")
devtools::install_github("hadley/r4ds")
mpg
library ggplot2
library("ggplots")
library("ggplot2")
mpg
tibble
ggplot(data = mpg) + geomPoint(mapping = aes(x = displ, y = hwy)
ggplot(data = mpg) + geomPoint(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) + geom_point(mapping = aes(x =class, y = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = blue))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = “blue”))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = “blue”))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
setwd("C:/Users/shawn/Coursera/Getting and Cleaning Data Course Project")
# Getting and Cleaning Data Course Project
# Load necessary libraries
library("data.table")
# Select the mean and std features
features <- read.table("UCI HAR Dataset/features.txt", col.names = c("index", "featureNames"))
desiredFeatures <- grep("(mean|std)\\(\\)", features[, "featureNames"])
measurements <- features[desiredFeatures, "featureNames"]
measurements <- gsub('[()]', '', measurements)
# Read training data files into tables
trainingSet <- read.table("UCI HAR Dataset/train/X_train.txt")[, desiredFeatures]
setnames(trainingSet, colnames(trainingSet), measurements)
trainingLabels <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = c("activityID"))
trainingSubjects <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = c("subjectID"))
training <- cbind(trainingSubjects, trainingLabels, trainingSet)
# Read test data files into tables
testSet <- read.table("UCI HAR Dataset/test/X_test.txt")[, desiredFeatures]
setnames(testSet, colnames(testSet), measurements)
testLabels <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = c("activityID"))
testSubjects <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = c("subjectID"))
testing <- cbind(testSubjects, testLabels, testSet)
combinedData <- rbind(training, testing)
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("activityID","activity"))
combinedData <- merge(x = combinedData, y = activityLabels)
combinedData = subset(combinedData, select = -c(activityID) )
tidyData <- aggregate(combinedData[, 2:67], list(subjectID = combinedData$subjectID, activity = combinedData$activity), mean)
fwrite(tidyData = combined, file = "tidyData.csv", quote = FALSE)
fwrite(x = tidyData, file = "tidyData.csv", quote = FALSE)
